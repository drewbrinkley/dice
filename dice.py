# dice.py

# import Python's 'random' module
import random


# diagrams of the faces of a 6-sided die using ASCII characters, stored in 'DICE_ART'
DICE_ART = {
     1: (
        "┌─────────┐",
        "│         │",
        "│    ●    │",
        "│         │",
        "└─────────┘",
    ),
    2: (
        "┌─────────┐",
        "│  ●      │",
        "│         │",
        "│      ●  │",
        "└─────────┘",
    ),
    3: (
        "┌─────────┐",
        "│  ●      │",
        "│    ●    │",
        "│      ●  │",
        "└─────────┘",
    ),
    4: (
        "┌─────────┐",
        "│  ●   ●  │",
        "│         │",
        "│  ●   ●  │",
        "└─────────┘",
    ),
    5: (
        "┌─────────┐",
        "│  ●   ●  │",
        "│    ●    │",
        "│  ●   ●  │",
        "└─────────┘",
    ),
    6: (
        "┌─────────┐",
        "│  ●   ●  │",
        "│  ●   ●  │",
        "│  ●   ●  │",
        "└─────────┘",
    ),
}
# define variable 'DIE_HEIGHT' to correspond to the number of rows the die will occupy
DIE_HEIGHT = len(DICE_ART[1])
# define variable 'DIE_WIDTH' to correspond to the number of columns required by the die
DIE_WIDTH = len(DICE_ART[1][0])
# define variable 'DIE_FACE_SEPARATOR' that contains a *space* character to separate the dice diagrams
DIE_FACE_SEPARATOR = " "


# create function 'parse_input()' with the argument set to the input string
def parse_input(input_string):
    # define docstring for the function
    """Return 'input_string' as integer between 1 and 6.

    Check if 'input_string' is an integer number between 1 and 6.
    If so, return an integer with the same value. Othewise, tell
    the user to enter a valid number and quit the program.
    """
    # create if-statement which will check that input is acceptable
    if input_string.strip() in {"1", "2", "3", "4", "5", "6"}:
        # return the input string as an integer, if it is validated
        return int(input_string)
    # create else-statement to handle invalid inputs
    else:
        # print string telling user to enter a valid number
        print("Please enter a number from 1 to 6.")
        # exits the app with 'SystemExit' exception and status code of 1 to show something went wrong
        raise SystemExit(1)


# define function 'roll_dice' which takes variable 'num_dice' as an argument
def roll_dice(num_dice):
    # create docstring to describe function's purpose
    """Return a list of integers with length 'num_dice'.

    Each integer in the returned list is a random number between 1 and 6, inclusive.
    """
    # create list 'roll_results' that is currently empty; will be used to store results of dice rolls
    roll_results = []
    # creates for-loop that will iterate based upon the number of dice the user chose to roll
    for _ in range(num_dice):
        # create variable 'roll' to represent the result of the dice roll, which is the integer between 1-6 generated by the 'randint()' function
        roll = random.randint(1, 6)
        # updates the list roll_results to add the result of the roll
        roll_results.append(roll)
    # returns the values in list roll_results after the for-loop concludes
    return roll_results


# create function 'generate_dice_faces_diagram' which takes argument 'dice_values' to hold the results of the list generated from calling 'roll_dice()'
def generate_dice_faces_diagram(dice_values):
    # create docstring to describe function
    """Return a diagram of ASCII art to display the dice faces of the 'dice_values'
    """
    # Generate a list of faces from DICE_ART
    dice_faces = [] # create empty list to store dice faces for the dice values
    # create for-loop that will iterate over the dice values
    for value in dice_values:
        # grab the die face diagram matching the roll value from 'DICE-ART' and adds it to the 'dice_faces' list
        dice_faces.append(DICE_ART[value])

    # Generate a list containing the dice faces rows
    dice_faces_rows = [] # create empty list to store the rows for the final diagram
    # create for-loop to iterate from 0 to DIE_HEIGHT - 1
    for row_idx in range(DIE_HEIGHT):
        # create empty list 'row_components' to hold the portions of die faces in each row
        row_components = []
        # nested for-loop to iterate over the dice faces
        for die in dice_faces:
            # stores the components of each row
            row_components.append(die[row_idx])
        # create variable 'row_string' to join all the row's components, separating each with a blank space
        row_string = DIE_FACE_SEPARATOR.join(row_components)
        # append the row string to the list that will define the final diagram
        dice_faces_rows.append(row_string)

    # Generate header with the word "RESULTS" centered
    # temporary variable to hold width of current diagram
    width = len(dice_faces_rows[0]) 
    # creates header with "RESULTS" by calling str.center(), with diagram's WIDTH and ~ as arguments
    diagram_header = " RESULTS ".center(width, "~")

    # generates string to hold final diagram, using \n to separate rows.  join() combines header and strings (rows) making up the die faces
    dice_faces_diagram = "\n".join([diagram_header] + dice_faces_rows)
    return dice_faces_diagram

# ~~~ App's main code block ~~~
# 1. Get and validate the user's input

# define variable 'num_dice_input' which calls input() to collect 
# user input on the number of dice to roll, which must fall between
# 1 and 6, inclusively
num_dice_input = input("How many dice do you want to roll? [1-6] ")
# define variable 'num_dice' which calls function parse_input on
# variable 'num_dice_input' and stores the return value in 'num_dice'
num_dice = parse_input(num_dice_input)

# 2. Roll the dice
# defines roll_results variable, which is the result of calling the function 'roll-dice' with the user-input 'num_dice' as the argument
roll_results = roll_dice(num_dice) 

# 3. Generate the ASCII diagram of the dice faces
dice_face_diagram = generate_dice_faces_diagram(roll_results)

# 4. Display the diagram
print(f"\n{dice_face_diagram}")